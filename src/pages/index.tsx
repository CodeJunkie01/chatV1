import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { useEffect, useRef, useState } from "react";
import { api } from "../utils/api";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { data: sessionData } = useSession();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="navbar fixed z-10 bg-[#2e026d]">
          <div className="navbar-start">
            <a className="btn-ghost btn text-xl normal-case text-white">
              herbst.design
            </a>
          </div>
          <div className="navbar-center hidden lg:flex">
            <ul className="menu menu-horizontal px-1"></ul>
          </div>
          <div className="navbar-end gap-4">
            <button
              className="btn-ghost btn"
              onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
              {sessionData ? "Sign out" : "Sign in"}
            </button>
          </div>
        </div>

        <main className="flex min-h-[90vh] flex-col items-center justify-center pt-4">
          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <div className="flex flex-col gap-2 px-4">
              {sessionData?.user ? (
                <AuthShowcase />
              ) : (
                <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                  Personal{" "}
                  <span className="text-[hsl(280,100%,70%)]">GPT-3</span> Access
                </h1>
              )}
            </div>
          </div>
        </main>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const aiselData = api.openAI.getDataFromAisel.useMutation();
  const [aiselBaseUrl, setAiselBaseUrl] = useState<string>("");
  const allClasses = api.openAI.getAllClasses.useQuery();
  const [inputZ, setInputZ] = useState<string>("");
  const { data: sessionData } = useSession();
  const [inputX, setInputX] = useState<string>("");
  const [inputY, setInputY] = useState<string>("");
  const [selectedClasses, setSelectedClasses] = useState<string[]>([]);
  const allData = api.openAI.getAiselData.useQuery();
  const queryAnswer = api.openAI.getAnswer.useMutation({
    onSuccess: (data) => {
      setWaitingForAnswer(false);
      addChat(data.answer);
    },
  });
  const python = api.openAI.executePyScript.useMutation();
  const [chat, setChat] = useState<string[]>([]);
  const addChat = (text: string) => {
    setChat((prev) => [...prev, text]);
  };
  const [waitingForAnswer, setWaitingForAnswer] = useState<boolean>(false);
  const [messageInput, setMessageInput] = useState<string>("");
  const messageRef = useRef<HTMLDivElement>(null);
  const [aiselStartIndex, setAiselStartIndex] = useState<number>(1);
  useEffect(() => {
    if (messageRef.current) {
      messageRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [chat]);
  const randomForest = api.openAI.classifyText.useMutation();
  return (
    <div className="container items-center justify-center">
      <div className="flex flex-col items-center justify-center gap-4"></div>
      <h1 className="mb-8 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Chat
      </h1>
      <div className="relative justify-center">
        <div className="mockup-window static h-96 overflow-scroll border bg-base-300 p-8 pb-16 scrollbar-none">
          {chat.map((text, i) => (
            <div
              key={i}
              ref={i === chat.length - 1 ? messageRef : undefined}
              className={`chat ${
                text.split(" ")[0] === "##UserInput" ? "chat-end" : "chat-start"
              }`}
            >
              <div className="chat-bubble chat-bubble-primary">
                {text.replace("##UserInput ", "")}
              </div>
            </div>
          ))}
          {waitingForAnswer ? (
            <progress className="base-100 progress progress-primary absolute left-12 bottom-12 w-9/12"></progress>
          ) : null}
          <input
            type="text"
            placeholder="Type here"
            className="overflow-none input absolute left-1 right-1 bottom-1 pr-20"
            onChange={(e) => setMessageInput(e.target.value)}
            value={messageInput}
          />
          <button
            className="btn-ghost btn absolute right-1 bottom-1"
            onClick={() => {
              addChat("##UserInput " + messageInput);
              setMessageInput("");
              setWaitingForAnswer(true);
              queryAnswer.mutate({
                inputString: messageInput,
              });
            }}
            disabled={queryAnswer.isLoading || messageInput.length < 1}
          >
            Send
          </button>
        </div>
      </div>
      <div className="divider my-20"></div>
      <h1 className="mb-8 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Embedding
      </h1>
      <div className="card flex flex-col justify-center gap-4 bg-base-100 p-4 lg:flex-row ">
        <textarea
          className="basis-4/9 textarea-bordered textarea h-40 scrollbar lg:w-[400px]"
          placeholder="Input 1"
          value={inputX}
          onChange={(e) => setInputX(e.target.value)}
        ></textarea>
        <div className="basis-1/9 divider lg:divider-horizontal">UND</div>
        <textarea
          className="basis-4/9 textarea-bordered textarea h-40 scrollbar lg:w-[400px]"
          placeholder="Input 2"
          value={inputY}
          onChange={(e) => setInputY(e.target.value)}
        ></textarea>
        <button
          className="btn-primary btn h-auto"
          onClick={() =>
            python.mutate({
              queryX: inputX,
              queryY: inputY,
            })
          }
        >
          Vergleichen
        </button>
      </div>

      <div className="flex justify-center p-10">
        <div className="stats stats w-min bg-secondary">
          <div className="stat">
            <div className="stat-title text-white">
              Semantische Ãœbereinstimmung
            </div>
            <div className="stat-value text-white">
              {python.data?.answer
                ? calcLevel(python.data?.answer as number)
                : " "}
              {python.isLoading ? (
                <progress className="progress progress-primary"></progress>
              ) : null}
            </div>
          </div>
        </div>
      </div>
      <div className="divider my-20"></div>
      <h1 className="mb-8 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Classification
      </h1>
      <div className="card flex flex-col justify-center gap-4 bg-base-100 p-4 lg:flex-row ">
        <textarea
          className="basis-4/9 textarea-bordered textarea h-40 scrollbar lg:w-[400px]"
          placeholder="Input 1"
          value={inputZ}
          onChange={(e) => setInputZ(e.target.value)}
        ></textarea>
        <div className="basis-1/9 divider lg:divider-horizontal">IN</div>
        <div className="basis-4/9 card gap-2 bg-base-100 p-4 lg:flex lg:w-[400px] ">
          {allClasses.data ? (
            allClasses.data.map((item, i) => (
              <div className="form-control" key={i}>
                <label
                  id={item}
                  className={`label cursor-pointer rounded border p-2 ${
                    selectedClasses.includes(item)
                      ? "border-primary bg-primary"
                      : "border-base-300 bg-base-300"
                  }`}
                  onClick={(data) => {
                    if (selectedClasses.includes(data.target.id)) {
                      setSelectedClasses(
                        selectedClasses.filter(
                          (item) => item !== data.target.id
                        )
                      );
                    } else {
                      setSelectedClasses([...selectedClasses, data.target.id]);
                    }
                  }}
                >
                  <span id={item} className="label-text text-white">
                    {item}
                  </span>
                </label>
              </div>
            ))
          ) : (
            <div className="loading-lg loading"></div>
          )}
        </div>
        <button
          className="btn-primary btn h-auto"
          onClick={() =>
            randomForest.mutate({
              text: inputZ,
              selectedClasses: selectedClasses,
            })
          }
          disabled={
            randomForest.isLoading ||
            inputZ.length < 1 ||
            selectedClasses.length < 1
          }
        >
          Klassifizieren
        </button>
      </div>
      <div className="flex justify-center p-10">
        <div className="card bg-secondary">
          <div className="stat max-w-[600px] lg:min-w-[300px]">
            <div className="stat-title text-white">Klasse</div>
            <div className="stat-value text-white">
              {randomForest.data?.answer ? randomForest.data.answer : " "}
              {randomForest.isLoading ? (
                <progress className="progress progress-primary"></progress>
              ) : null}
            </div>
          </div>
        </div>
      </div>
      <div className="divider my-20"></div>
      <h1 className="mb-8 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Training Data (arbitrary)
      </h1>
      <div className="card flex flex-col justify-center gap-4 bg-base-100 p-4 lg:flex-row ">
		<textarea placeholder="Startindex" value={aiselStartIndex} onChange={(e)=> setAiselStartIndex(e.target.value)}></textarea>
        <textarea
          className="basis-4/9 textarea-bordered textarea h-40 scrollbar lg:w-[400px]"
          placeholder="Aisel Base Url"
          value={aiselBaseUrl}
          onChange={(e) => setAiselBaseUrl(e.target.value)}
        ></textarea>

        <button
          className="btn-primary btn h-auto"
          onClick={() =>
            aiselData.mutate({
              baseUrl: aiselBaseUrl,
			  startIndex: aiselStartIndex,
            })
          }
          disabled={aiselData.isLoading || aiselBaseUrl.length < 1}
        >
          Abfragen
        </button>
      </div>
	  <div>
		{allData.isSuccess ? allData.data.map((data) => {return (<div className="text text-white"><a href={data.url} className="text text-white">{data.keywords}</a> </div>)}) : null} 
	  </div>
      <div className="flex justify-center p-10">
        <div className="card bg-secondary">
          <div className="stat max-w-[600px] lg:min-w-[300px]">
            {aiselData.isLoading ? (
              <progress className="progress progress-primary"></progress>
            ) : null}
          </div>
        </div>
      </div>
    </div>
  );
};

const calcLevel = (level: number) => {
  if (level < 0.75) return "LOW";
  if (level < 0.8) return "MEDIUM";
  return "HIGH";
};
